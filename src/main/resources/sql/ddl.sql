-- 단위 테이블 MEMBER, STUDY_STATE_TABLE, APPLY_STATE_TABLE, TRADE_STATE_TABLE, CATEGORY
CREATE TABLE MEMBER
(
    EMAIL                 VARCHAR2(200)  PRIMARY KEY,
    NAME                  VARCHAR2(200)  NOT NULL ,
    PICTURE               VARCHAR2(200)  NOT NULL ,
    ROLE				  VARCHAR2(200)  DEFAULT 'GUEST' ,
);

-- APPLY_STATE_CODE ('WAIT', 'OK', 'NO')
-- APPLY_STATE ('수락대기', '수락완료', '신청거부')
CREATE TABLE APPLY_STATE_TABLE
(
    APPLY_STATE_CODE      VARCHAR2(200)  PRIMARY KEY ,
    APPLY_STATE           VARCHAR2(200)  NOT NULL
);

-- TRATE_STATE_CODE ('ING', 'BOOK', 'FIN')
-- TRADE_STATE ('판매중', '예약중', '판매완료')
CREATE TABLE TRADE_STATE_TABLE
(
    TRADE_STATE_CODE      VARCHAR2(200)  PRIMARY KEY ,
    TRADE_STATE           VARCHAR2(200)  NOT NULL
);

-- STUDY_STATE_CODE ('REC', 'ING', 'FIN')
-- STUDY_STATE ('모집중', '진행중', '종료')
CREATE TABLE STUDY_STATE_TABLE
(
    STUDY_STATE_CODE      VARCHAR2(200)  PRIMARY KEY ,
    STUDY_STATE           VARCHAR2(200)  NOT NULL
);

CREATE TABLE CATEGORY
(
    CATEGORY_NO           NUMBER  PRIMARY KEY ,
    CATEGORY_NAME         VARCHAR2(200)  NOT NULL
);
CREATE SEQUENCE CATEGORY_SEQ;

-----------------------------------------------------------

-- STUDY
CREATE TABLE STUDY
(
    STUDY_NO              NUMBER  PRIMARY KEY ,
    STUDY_NAME            VARCHAR2(200)  NOT NULL ,
    STUDY_DESC			  VARCHAR2(200)	 NOT NULL ,
    STUDY_INFO            CLOB  NOT NULL ,
    STUDY_REGDATE         DATE  NOT NULL ,
    STUDY_STATE_CODE      VARCHAR2(200)  DEFAULT 'REC' ,
    CONSTRAINT FK_STUDY_STUDY_STATE_CODE FOREIGN KEY(STUDY_STATE_CODE) REFERENCES STUDY_STATE_TABLE(STUDY_STATE_CODE)
);
CREATE SEQUENCE STUDY_SEQ;

-- STUDY_CATEGORY
CREATE TABLE STUDY_CATEGORY
(
    STUDY_NO              NUMBER  NOT NULL ,
    CATEGORY_NO           NUMBER  NOT NULL ,
    CONSTRAINT FK_STUDY_CATEGORY_STUDY_NO FOREIGN KEY(STUDY_NO) REFERENCES STUDY(STUDY_NO),
    CONSTRAINT FK_STUDY_CATEGOTY_CATEGORY_NO FOREIGN KEY(CATEGORY_NO) REFERENCES CATEGORY(CATEGORY_NO),
    CONSTRAINT PK_STUDY_CATEGORY PRIMARY KEY (STUDY_NO, CATEGORY_NO)
);

-- STUDY_COMMENT
CREATE TABLE STUDY_COMMENT
(
    STUDY_COMMENT_NO      NUMBER  PRIMARY KEY ,
    STUDY_COMMENT_CONTENT  VARCHAR2(200)  NOT NULL ,
    STUDY_COMMENT_REGDATE  DATE  NOT NULL ,
    EMAIL                 VARCHAR2(200)  NOT NULL ,
    STUDY_NO              NUMBER  NOT NULL ,
    CONSTRAINT FK_STUDY_COMMENT_EMAIL FOREIGN KEY(EMAIL) REFERENCES MEMBER(EMAIL) ,
    CONSTRAINT FK_STUDY_COMMENT_STUDY_NO FOREIGN KEY(STUDY_NO) REFERENCES STUDY(STUDY_NO)

);
CREATE SEQUENCE STUDY_COMMENT_SEQ;

-- APPLY
CREATE TABLE APPLY
(
    APPLY_NO              NUMBER  PRIMARY KEY ,
    STUDY_NO              NUMBER  NOT NULL ,
    APPLY_REGDATE         VARCHAR2(200)  NOT NULL ,
    APPLY_CONTENT         VARCHAR2(200)  NOT NULL ,
    EMAIL                 VARCHAR2(200)  NOT NULL ,
    APPLY_STATE_CODE      VARCHAR2(200)  DEFAULT 'WAIT' ,
    CONSTRAINT FK_APPLY_EMAIL FOREIGN KEY(EMAIL) REFERENCES MEMBER(EMAIL) ,
    CONSTRAINT FK_APPLY_STUDY_NO FOREIGN KEY(STUDY_NO) REFERENCES STUDY(STUDY_NO) ,
    CONSTRAINT FK_APPLY_APPLY_STATE_CODE FOREIGN KEY(APPLY_STATE_CODE) REFERENCES APPLY_STATE_TABLE(APPLY_STATE_CODE)
);
CREATE SEQUENCE APPLY_SEQ;

-- STUDY_MEMBER
CREATE TABLE STUDY_MEMBER
(
    EMAIL                 VARCHAR2(200)  NOT NULL ,
    STUDY_NO              NUMBER  NOT NULL ,
    STUDY_MEMBER_ROLE     VARCHAR2(200)  NOT NULL ,


    CONSTRAINT FK_STUDY_MEMBER_EMAIL FOREIGN KEY(EMAIL) REFERENCES MEMBER(EMAIL) ,
    CONSTRAINT FK_STUDY_MEMBER_STUDY_NO FOREIGN KEY(STUDY_NO) REFERENCES STUDY(STUDY_NO) ,


    CONSTRAINT PK_STUDY_MEMBER PRIMARY KEY (EMAIL, STUDY_NO)
);

-- NOTICE
CREATE TABLE NOTICE
(
    NOTICE_NO             NUMBER  PRIMARY KEY ,
    NOTICE_TITLE          VARCHAR2(200)  NOT NULL ,
    NOTICE_CONTENT        CLOB  NOT NULL ,
    NOTICE_REGDATE        DATE  NOT NULL ,
    NOTICE_HITS           NUMBER  DEFAULT 0 ,
    EMAIL                 VARCHAR2(200)  NOT NULL ,
    STUDY_NO              NUMBER  NOT NULL ,
    ADDRESS               VARCHAR2(200)  NOT NULL ,
    CONSTRAINT FK_NOTICE_EMAIL_STUDY_NO FOREIGN KEY(EMAIL, STUDY_NO) REFERENCES STUDY_MEMBER(EMAIL, STUDY_NO)
);
CREATE SEQUENCE NOTICE_SEQ;

-- NOTICE_FILE
CREATE TABLE NOTICE_FILE
(
    NOTICE_FILE_NO        NUMBER  PRIMARY KEY ,
    NOTICE_FILE_NAME      VARCHAR2(200)  NOT NULL ,
    NOTICE_FILE_ADDRESS   VARCHAR2(200)  NOT NULL ,
    NOTICE_NO             NUMBER  NOT NULL ,
    CONSTRAINT FK_NOTICE_FILE_NOTICE_NO FOREIGN KEY(NOTICE_NO) REFERENCES NOTICE(NOTICE_NO)
);
CREATE SEQUENCE NOTICE_FILE_SEQ;

-- TASK
CREATE TABLE TASK
(
    TASK_NO               NUMBER  PRIMARY KEY ,
    TASK_TITLE            VARCHAR2(200)  NOT NULL ,
    TASK_CONTENT          CLOB  NOT NULL ,
    TASK_REGDATE          DATE  NOT NULL ,
    EMAIL                 VARCHAR2(200)  NOT NULL ,
    STUDY_NO              NUMBER  NOT NULL ,
    CONSTRAINT FK_TASK_EMAIL_STUDY_NO FOREIGN KEY(EMAIL, STUDY_NO) REFERENCES STUDY_MEMBER(EMAIL, STUDY_NO)
);
CREATE SEQUENCE TASK_SEQ;

-- TASK FILE
CREATE TABLE TASK_FILE
(
    TASK_FILE_NO          NUMBER  PRIMARY KEY ,
    TASK_FILE_NAME        VARCHAR2(200)  NOT NULL ,
    TASK_NO               NUMBER  NOT NULL ,
    TASK_FILE_ADDRESS     VARCHAR2(200)  NOT NULL ,
    CONSTRAINT FK_TASK_FILE_TASK_NO FOREIGN KEY(TASK_NO) REFERENCES TASK(TASK_NO)
);
CREATE SEQUENCE TASK_FILE_SEQ;

-- TASK SUBMIT
CREATE TABLE TASK_SUBMIT
(
    TASK_SUBMIT_NO        NUMBER  PRIMARY KEY ,
    TASK_SUBMIT_CONTENT   CLOB  NOT NULL ,
    TASK_SUBMIT_REGDATE   DATE  NOT NULL ,
    TASK_NO               NUMBER  NOT NULL ,
    EMAIL                 VARCHAR2(200)  NOT NULL ,
    STUDY_NO              NUMBER  NOT NULL ,
    CONSTRAINT FK_TASK_SUBMIT_TASK_NO FOREIGN KEY(TASK_NO) REFERENCES TASK(TASK_NO) ,
    CONSTRAINT FK_TASK_SUBMIT_EMAIL_STUDY_NO FOREIGN KEY(EMAIL, STUDY_NO) REFERENCES STUDY_MEMBER(EMAIL, STUDY_NO)
);
CREATE SEQUENCE TASK_SUBMIT_SEQ;

-- TASK_SUBMIT_FILE
CREATE TABLE TASK_SUBMIT_FILE
(
    TASK_SUBMIT_FILE_NO   VARCHAR2(200)  PRIMARY KEY ,
    TASK_SUBMIT_FILE_NAME  VARCHAR2(200)  NOT NULL ,
    TASK_SUBMIT_FILE_ADDRESS  VARCHAR2(200)  NOT NULL ,
    TASK_SUBMIT_NO        NUMBER  NOT NULL ,
    CONSTRAINT FK_TASK_SUBMIT_FILE1 FOREIGN KEY(TASK_SUBMIT_NO) REFERENCES TASK_SUBMIT(TASK_SUBMIT_NO)
);
CREATE SEQUENCE TASK_SUBMIT_FILE_SEQ;

-- MARKET_BOARD
CREATE TABLE MARKET_BOARD
(
    MARKET_BOARD_NO       NUMBER  PRIMARY KEY ,
    MARKET_BOARD_TITLE    VARCHAR2(200)  NOT NULL ,
    MARKET_BOARD_CONTENT  CLOB  NOT NULL ,
    MARKET_BOARD_REGDATE  DATE  NOT NULL ,
    MARKET_BOARD_HITS     NUMBER  DEFAULT 0 ,
    TRADE_LOCATION        VARCHAR2(200)  NOT NULL ,
    LIKES                 NUMBER  DEFAULT 0 ,
    PRICE                 VARCHAR2(200)  NOT NULL ,
    EMAIL                 VARCHAR2(200)  NOT NULL ,
    TRADE_STATE_CODE      VARCHAR2(200)  DEFAULT 'ING' ,
    CONSTRAINT FK_MARKET_BOARD_EMAIL FOREIGN KEY(EMAIL) REFERENCES MEMBER(EMAIL) ,
    CONSTRAINT FK_MARKET_BOARD1 FOREIGN KEY(TRADE_STATE_CODE) REFERENCES TRADE_STATE_TABLE(TRADE_STATE_CODE)
);
CREATE SEQUENCE MARKET_BOARD_SEQ;

-- LIKE_LIST
CREATE TABLE LIKE_LIST
(
    LIKE_NO               NUMBER  PRIMARY KEY ,
    EMAIL                 VARCHAR2(200)  NOT NULL ,
    MARKET_BOARD_NO       NUMBER  NOT NULL ,
    CONSTRAINT FK_LIKE_LIST_EMAIL FOREIGN KEY(EMAIL) REFERENCES MEMBER(EMAIL) ,
    CONSTRAINT FK_LIKE_LIST1 FOREIGN KEY(MARKET_BOARD_NO) REFERENCES MARKET_BOARD(MARKET_BOARD_NO)
);
CREATE SEQUENCE LIKE_LIST_SEQ;

-- MARKET_FILE
CREATE TABLE MARKET_FILE
(
    MARKET_FILE_NO        NUMBER  PRIMARY KEY ,
    MARKET_FILE_NAME      VARCHAR2(200)  NOT NULL ,
    MARKET_FILE_ADDRESS   VARCHAR2(200)  NOT NULL ,
    MARKET_BOARD_NO       NUMBER  NOT NULL ,
    CONSTRAINT FK_MARKET_FILE1 FOREIGN KEY(MARKET_BOARD_NO) REFERENCES MARKET_BOARD(MARKET_BOARD_NO)
);
CREATE SEQUENCE MARKET_FILE_SEQ;

-- MARKET_COMMENT
CREATE TABLE MARKET_COMMENT
(
    MARKET_COMMENT_NO     NUMBER  PRIMARY KEY ,
    MARKET_COMMENT_CONTENT  VARCHAR2(200)  NOT NULL ,
    MARKET_COMMENT_REGDATE  DATE  NOT NULL ,
    EMAIL                 VARCHAR2(200)  NOT NULL ,
    MARKET_BOARD_NO       NUMBER  NOT NULL ,
    CONSTRAINT FK_MARKET_COMMENT_EMAIL FOREIGN KEY(EMAIL) REFERENCES MEMBER(EMAIL) ,
    CONSTRAINT FK_MARKET_COMMENT1 FOREIGN KEY(MARKET_BOARD_NO) REFERENCES MARKET_BOARD(MARKET_BOARD_NO)
);
CREATE SEQUENCE MARKET_COMMENT_SEQ;